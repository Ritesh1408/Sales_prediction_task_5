# -*- coding: utf-8 -*-
"""Task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqCtoO5F1xsGELkBdX18uBxAOwxFW9W_

import the library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import statsmodels.api as sm

"""Reading the data"""

df = pd.read_csv('Advertising.csv')
print(df.head())

"""Checking the specific data"""

print(df.head(15))

df.describe

df.Newspaper

"""Checking the null data"""

print(df.isnull().sum())

"""Checking the sales data of every Product"""

# Read the CSV file
df = pd.read_csv("Advertising.csv")

# Get the sales data for TV
tv_sales = df["TV"]

# Plot the sales data
plt.plot(tv_sales, label="TV Sales")

# Set the title of the plot
plt.title("TV Sales Data")

# Set the x-axis label
plt.xlabel("Month")

# Set the y-axis label
plt.ylabel("Sales (in units)")

# Show the plot
plt.show()

# Read the CSV file
df = pd.read_csv("Advertising.csv")

# Get the sales data for TV
radio_sales = df["Radio"]

# Plot the sales data
plt.plot(radio_sales, label="Radio Sales")

# Set the title of the plot
plt.title("Radio Sales Data")

# Set the x-axis label
plt.xlabel("Month")

# Set the y-axis label
plt.ylabel("Sales (in units)")

# Show the plot
plt.show()

# Create a list of the values to be plotted
df = [row[1] for row in df]

# Create a bar plot
plt.bar(range(len(df)), df)

# Set the title of the plot
plt.title('Sales graph')

# Set the x-axis label
plt.xlabel('X-Axis')

# Set the y-axis label
plt.ylabel('Y-Axis')

# Show the plot
plt.show()

sns.distplot(df['Newspaper'])

sns.pairplot(df, x_vars=['TV', 'Newspaper', 'Radio'],y_vars='Sales', height=4,aspect=1, kind='scatter')
plt.show()

sns.heatmap(df.corr(), cmap="YlGnBu", annot= True)
plt.show()

X = df['TV']
y = df['Sales']

X = X.values.reshape(-1,1)

X

y

print(X.shape, y.shape)

X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.33)

print(X_train.shape,y_train.shape)

from sklearn.metrics import  mean_squared_error , r2_score
from sklearn.model_selection import  cross_val_score,GridSearchCV
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

knn = KNeighborsRegressor().fit(X_train, y_train)
knn

knn_train_pred = knn.predict(X_train)

knn_test_pred = knn.predict(X_test)

print(knn_train_pred, knn_test_pred)

Results = pd.DataFrame(columns=["Model","Train R2", "Test R2", "Test RMSE", "Variance"])

r2 = r2_score(y_test,knn_test_pred)
r2_train = r2_score(y_train,knn_train_pred)
rmse = np.sqrt(mean_squared_error(y_test,knn_test_pred))
variance = r2_train - r2
Results = Results.append({"Model":"K-Nearest Neighbours","Train R2":r2_train,"Test R2":r2,"Test RMSE":rmse,"Variance":variance},ignore_index=True)
print("R2:",r2)
print("RMSE:",rmse)

Results.head()

svr = SVR().fit(X_train,y_train)
svr

svr_train_pred = svr.predict(X_train)
svr_test_pred = svr.predict(X_test)

print(svr_train_pred,svr_test_pred)

X_train_constant = sm.add_constant(X_train)

model = sm.OLS(y_train,X_train_constant).fit()

model.params

print(model.summary())

plt.scatter(X_train, y_train)
plt.plot(X_train, 6.9955 + 0.0541 * X_train, 'y')
plt.show()

y_train_pred = model.predict(X_train_constant)
res = (y_train - y_train_pred)
res

y_train_pred

fig = plt.figure()
sns.distplot(res, bins = 15)
fig.suptitle('Error Terms', fontsize = 15)
plt.xlabel('Diffrenece in y_train and y_train_pred', fontsize = 15)
plt.show()

plt.scatter(X_train, res)
plt.show()